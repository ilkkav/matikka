{"version":3,"sources":["belle.png","carriage.png","task.ts","TaskPage.tsx","App.tsx","serviceWorker.js","index.js"],"names":["module","exports","task","result","Math","floor","random","first","second","TaskPage","input","setDone","className","type","onChange","event","value","target","parseInt","getImage","count","carriage","belle","App","useState","currentTaskDone","setCurrentTaskDone","doneCount","setDoneCount","style","height","padding","justifySelf","pointerEvents","src","onClick","done","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6GAAAA,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,sC,gKCO9BC,G,WAAO,WAClB,IAAMC,EAASC,KAAKC,MAAsB,GAAhBD,KAAKE,UACzBC,EAAQH,KAAKC,MAAMD,KAAKE,SAAYH,GAE1C,MAAO,CAACI,QAAOC,OADAL,EAASI,EACDJ,YCPlB,SAASM,EAAT,GAAiH,IAAD,IAA5FC,MAASH,EAAmF,EAAnFA,MAAOC,EAA4E,EAA5EA,OAAQL,EAAoE,EAApEA,OAASQ,EAA2D,EAA3DA,QAI1D,OACE,oCACE,yBAAKC,UAAU,sBACb,yBAAKA,UAAU,aAAaL,GAC5B,yBAAKK,UAAU,aAAf,KACA,yBAAKA,UAAU,aAAaJ,GAC5B,yBAAKI,UAAU,aAAf,KACA,2BAAOA,UAAU,oBAAoBC,KAAK,OAAOC,SAC/C,SAACC,GAVS,IAACC,IAWKD,EAAME,OAAOD,MAXAE,SAASF,KAAWb,GAY7CQ,GAAQ,QAKf,G,oCCbDQ,EAAW,SAACC,GAAD,OAAmBA,EAAQ,IAAM,EAAIC,IAAWC,KAgClDC,MA9Bf,WAEE,IAFa,EAOiCC,oBAAS,GAP1C,mBAONC,EAPM,KAOWC,EAPX,OAQqBF,mBAAS,GAR9B,mBAQNG,EARM,KAQKC,EARL,KAUb,OACE,yBAAKhB,UAAU,OACb,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,oBAAf,qBAEDa,EACC,yBAAKb,UAAU,mBACb,yBAAKA,UAAU,oBAAoBiB,MAAO,CAAEC,OAAQ,IAAKC,QAAS,EAAGC,YAAa,SAAUC,cAAe,OAASC,IAAKf,EAASQ,GAAYQ,QAAS,WACrJT,GAAmB,OAKvB,kBAACjB,EAAD,CAAUC,MAAOR,IAAQS,QArBR,SAACyB,GACtBV,EAAmBU,GACnBR,EAAaD,EAAY,MAqBvB,2BAAIA,KCzBUU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.281a7edb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/belle.c016e467.png\";","module.exports = __webpack_public_path__ + \"static/media/carriage.c7e8586c.png\";","\nexport type Task = {\n  first: number\n  second: number\n  result: number\n}\n\nexport const task = (): Task=> {\n  const result = Math.floor(Math.random() * 11); // 0...10\n  const first = Math.floor(Math.random() * (result)); // < result\n  const second = result - first;\n  return {first, second, result};\n}","import React, { useState } from 'react';\nimport './styles.css';\nimport { Task } from './task';\n\nexport function TaskPage({ input: { first, second, result}, setDone }: { input: Task, setDone: (t: boolean) => void }) {\n\n  const isCorrect = (value: string) => parseInt(value) === result\n\n  return (\n    <>\n      <div className=\"flex-container row\">\n        <div className=\"flex-item\">{first}</div>\n        <div className=\"flex-item\">+</div>\n        <div className=\"flex-item\">{second}</div>\n        <div className=\"flex-item\">=</div>\n        <input className=\"flex-item color-0\" type=\"text\" onChange={\n          (event) => {\n            if (isCorrect(event.target.value)) {\n              setDone(true);\n            }\n          }}\n        />\n      </div>\n      {false && <div className=\"flex-container row\">\n        <button className=\"flex-item button\" value=\"valmis\" onClick={() => {\n\n        }} >\n          TARKISTA\n        </button>\n      </div>\n      }\n    </>\n  );\n}\n","\nimport React, { useState } from 'react';\nimport './App.css';\nimport './styles.css';\nimport { task } from './task';\nimport { TaskPage } from './TaskPage';\nimport pirateShip from './pirate_ship.jpg';\nimport belle from './belle.png';\nimport carriage from './carriage.png';\n\nconst getImage = (count: number) => count % 2 === 0 ? carriage : belle;\n\nfunction App() {\n\n  const handleTaskDone = (done: boolean) => {\n    setCurrentTaskDone(done);\n    setDoneCount(doneCount + 1);\n  }\n\n  const [currentTaskDone, setCurrentTaskDone] = useState(false);\n  const [doneCount, setDoneCount] = useState(0);\n\n  return (\n    <div className=\"App\">\n      <div className=\"flex-container-3\">\n        <div className=\"flex-row color-2\">LYYTIN LASKUPELI</div>\n      </div>\n      {currentTaskDone ?\n        <div className=\"flex-row column\">\n          <img className=\"flex-item color-2\" style={{ height: 500, padding: 0, justifySelf: 'center', pointerEvents: \"all\" }} src={getImage(doneCount)} onClick={() => {\n            setCurrentTaskDone(false);\n          }\n          }></img>\n        </div>\n        :\n        <TaskPage input={task()} setDone={handleTaskDone} />\n      }\n      <p>{doneCount}</p>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}