{"version":3,"sources":["princesses.jpg","butterfly.jpg","task.ts","TaskPage.tsx","WordTaskPage.tsx","App.tsx","serviceWorker.js","index.js"],"names":["module","exports","task","result","Math","floor","random","first","second","words","wordTask","secondRandom","randomIndex","length","word","firstRandom","blankIndices","sort","a","b","letters","map","c","status","forEach","i","blanks","TaskPage","input","setDone","className","type","onChange","event","value","target","parseInt","removeFromArray","source","splice","findIndex","GuessLetters","withStatuses","solved","console","log","s","indexToUpdate","l","WordTaskPage","useState","lettersToGuess","setLettersToGuess","solvedLetters","setSolvedLetters","saveCharInput","includes","setTimeout","saveInput","slice","GuessLetterBox","onClick","correct","name","getImage","count","butterfly","princesses","App","handleTaskDone","done","setCurrentTaskDone","setDoneCount","doneCount","currentTaskDone","wordGameSelected","setWordGameSelected","src","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.49c7ee61.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/princesses.eb8b0801.jpg\";","module.exports = __webpack_public_path__ + \"static/media/butterfly.cad1efa9.jpg\";","\nexport type Task = {\n  first: number\n  second: number\n  result: number\n}\n\nexport type WordTask = {\n  letters: Letter[]\n  blanks: string[]\n}\n\ntype LetterStatus = 'Normal' | 'Hidden' | 'Solved'\n\nexport type Letter = {\n  c: string\n  status: LetterStatus\n}\n\nexport const task = (): Task=> {\n  const result = Math.floor(Math.random() * 11); // 0...10\n  const first = Math.floor(Math.random() * (result)); // < result\n  const second = result - first;\n  return {first, second, result};\n}\n\nconst words = [\n  'PERHONEN',\n  'PRINSESSA',\n  'PALOAUTO',\n  'SATEENKAARI'\n]\n\nexport const wordTask = (): WordTask => {\n  const randomIndex = (): number => Math.floor(Math.random()*words.length)\n  const word = words[randomIndex()]\n  const firstRandom = randomIndex()\n  let secondRandom\n  while (true) {\n    secondRandom = randomIndex()\n    if (secondRandom !== firstRandom) {\n      break;\n    }\n  }\n  const blankIndices = [firstRandom, secondRandom].sort((a: number, b: number) => a-b)\n  const letters: Letter[] = [...word].map(c => ({c, status: 'Normal'}))\n  blankIndices.forEach(i => {letters[i].status = 'Hidden'})\n  return {letters, blanks: blankIndices.map(i => letters[i].c)}\n/*\n  const withBlanks = [...word];\n  var blanks = '';\n  for (let i = 0; i < blankIndices.length; i++) { \n    const letterAtI = word[blankIndices[i]]\n    blanks = blanks + letterAtI\n    withBlanks[blankIndices[i]] = '_'\n  }\n  console.log('blanks', blanks)\n  return {word, wordWithBlanks: withBlanks.join(''), blanks}\n  */\n}","import React from 'react';\nimport './styles.css';\nimport { Task } from './task';\n\nexport function TaskPage({ input: { first, second, result }, setDone }: { input: Task, setDone: (t: boolean) => void }) {\n\n  const isCorrect = (value: string) => parseInt(value) === result\n\n  return (\n\n    <div className=\"flex-container row\">\n      <div className=\"flex-item\">{first}</div>\n      <div className=\"flex-item\">+</div>\n      <div className=\"flex-item\">{second}</div>\n      <div className=\"flex-item\">=</div>\n      <input className=\"flex-item color-0\" type=\"tel\" onChange={\n        (event) => {\n          if (isCorrect(event.target.value)) {\n            setDone(true);\n          }\n        }}\n      />\n    </div>\n  );\n}\n","import React, { useState } from 'react';\nimport './styles.css';\nimport { WordTask, Letter } from './task';\n\nconst removeFromArray = (c: string, source: string[]) => {\n  source.splice(source.findIndex(i => i === c), 1)\n  return source\n}\n\nconst GuessLetters = ['A', 'R', 'I', 'N', 'P', 'E', 'O', 'T']\n\n\nconst withStatuses = (letters: Letter[], solved: string[]) => {\n  const result = [...letters]\n  console.log('result:', result)\n  console.log('solved:', solved)\n  solved.forEach(s => {\n    const indexToUpdate = result.findIndex(l => (l.c === s && l.status === 'Hidden'))\n    if (indexToUpdate !== -1) {\n      result[indexToUpdate].status = 'Solved'\n    }\n  })\n  return result\n}\n\nexport function WordTaskPage({ input: { letters, blanks }, setDone }: { input: WordTask, setDone: (t: boolean) => void }) {\n\n  const [lettersToGuess, setLettersToGuess] = useState<string[]>([...blanks])\n  const [solvedLetters, setSolvedLetters] = useState<string[]>([])\n\n  const saveCharInput = (c: string) => {\n\n    if (!lettersToGuess.includes(c)) {\n      return //incorrect letter\n    }\n\n    setSolvedLetters([...solvedLetters, c])\n    setLettersToGuess(removeFromArray(c, lettersToGuess))\n    if (lettersToGuess.length === 0) {\n      setTimeout(() => setDone(true), 1000)\n    }\n  }\n\n  return (\n    <>\n      <div className=\"flex-container row belize\">\n        {withStatuses(letters, solvedLetters).map((l: Letter) => LetterBox(l, saveCharInput))}\n      </div>\n      <div className=\"flex-container low row\">\n        {GuessLetters.slice(0, 4).map(l => GuessLetterBox(l, saveCharInput, solvedLetters.includes(l)))}\n      </div>\n      <div className=\"flex-container low row\">\n        {GuessLetters.slice(4, 8).map(l => GuessLetterBox(l, saveCharInput, solvedLetters.includes(l)))}\n      </div>\n    </>)\n}\n\nfunction LetterBox(c: Letter, saveInput: ((s: string) => void)) {\n  return (\n    c.status === 'Hidden' ?\n      <input className=\"flex-item-small silver\" type=\"text\" onChange={\n        (event) => {\n          saveInput(event.target.value)\n        }\n      }\n      /> :\n      c.status === 'Normal' ?\n        (<div className=\"flex-item-small river\">{c.c}</div>)\n        :\n        <div className=\"flex-item-small emerald\">{c.c}</div>\n  )\n}\n\nconst GuessLetterBox = (c: string, onClick: ((s: string) => void), correct: boolean = false) => {\n  const name = `flex-item asphalt ${correct ? 'correct-text' : 'hollow'}`;\n  return (\n    <div className={name} onClick={() => { onClick(c) }} >{c}</div>)\n}","\nimport React, { useState } from 'react';\nimport './App.css';\nimport './styles.css';\nimport { task, wordTask } from './task';\nimport { TaskPage } from './TaskPage';\nimport pirateShip from './pirate_ship.jpg';\nimport princesses from './princesses.jpg';\nimport butterfly from './butterfly.jpg'\nimport carriage from './carriage.png';\nimport { WordTaskPage } from './WordTaskPage';\n\nconst getImage = (count: number) => count % 2 === 0 ? butterfly : princesses;\n\nfunction App() {\n\n  const handleTaskDone = (done: boolean) => {\n    setCurrentTaskDone(done);\n    setDoneCount(doneCount + 1);\n  }\n\n  const [currentTaskDone, setCurrentTaskDone] = useState(false);\n  const [doneCount, setDoneCount] = useState(0);\n  const [wordGameSelected, setWordGameSelected] = useState<boolean>(true);\n\n  return (\n    <div className=\"App\">\n      <div className=\"header flex-item alizarin\">LYYTIN LASKUPELI</div>\n      {currentTaskDone ?\n        <img className=\"flex-item color-2 responsive-image\" src={getImage(doneCount)} onClick={() => {\n          setCurrentTaskDone(false);\n        }\n        }></img>\n        :\n        wordGameSelected ? <WordTaskPage input={wordTask()} setDone={handleTaskDone} />\n          : <TaskPage input={task()} setDone={handleTaskDone} />\n      }\n      <div className=\"flex-container narrow\">\n        <button className=\"flex-item button\" value=\"valmis\" onClick={() => {\n          setWordGameSelected(!wordGameSelected)\n          setCurrentTaskDone(false)\n        }} >\n          Vaihda peli\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}