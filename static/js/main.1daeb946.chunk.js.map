{"version":3,"sources":["butterfly.jpg","princesses.jpg","fire_engine.jpg","penguin.jpg","unicorn.jpg","castle.jpg","rainbow.jpg","task.ts","TaskPage.tsx","WordTaskPage.tsx","App.tsx","serviceWorker.js","index.js"],"names":["module","exports","wordsAndImages","PERHONEN","butterfly","PRINSESSA","princesses","PALOAUTO","fireEngine","SATEENKAARI","rainbow","PINGVIINI","penguin","LINNA","castle","YKSISARVINEN","unicorn","task","result","Math","floor","random","first","second","randomLessThan","max","wordTask","word","secondRandom","firstRandom","length","blankIndices","sort","a","b","letters","map","c","status","forEach","i","blanks","image","guessLetters","randomLettersIncluding","randomLetter","randomLetterExcluding","toExclude","candidate","includes","toInclude","push","TaskPage","input","setDone","className","type","onChange","event","value","target","parseInt","removeFromArray","source","splice","findIndex","withStatuses","solved","s","indexToUpdate","l","WordTaskPage","useState","lettersToGuess","setLettersToGuess","solvedLetters","setSolvedLetters","saveCharInput","setTimeout","saveInput","key","LetterBox","slice","GuessLetterBox","onClick","correct","name","wordTasks","Object","keys","App","handleTaskDone","done","setDoneCount","doneCount","setCurrentTaskDone","currentTaskDone","wordGameSelected","setWordGameSelected","src","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1daeb946.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/butterfly.cad1efa9.jpg\";","module.exports = __webpack_public_path__ + \"static/media/princesses.eb8b0801.jpg\";","module.exports = __webpack_public_path__ + \"static/media/fire_engine.850934ae.jpg\";","module.exports = __webpack_public_path__ + \"static/media/penguin.40fd825f.jpg\";","module.exports = __webpack_public_path__ + \"static/media/unicorn.e2371059.jpg\";","module.exports = __webpack_public_path__ + \"static/media/castle.d188f359.jpg\";","module.exports = __webpack_public_path__ + \"static/media/rainbow.70091d51.jpg\";","import butterfly from './butterfly.jpg'\nimport pirateShip from './pirate_ship.jpg';\nimport princesses from './princesses.jpg';\nimport carriage from './carriage.png';\nimport fireEngine from './fire_engine.jpg';\nimport penguin from './penguin.jpg';\nimport unicorn from './unicorn.jpg';\nimport castle from './castle.jpg';\nimport rainbow from './rainbow.jpg';\n\nexport type Task = {\n  first: number\n  second: number\n  result: number\n}\n\nexport type WordTask = {\n  letters: Letter[]\n  blanks: string[]\n  image: any\n  guessLetters: string[]\n}\n\ntype LetterStatus = 'Normal' | 'Hidden' | 'Solved'\n\nexport type Letter = {\n  c: string\n  status: LetterStatus\n}\n\nconst wordsAndImages: Record<string, any> = {\n  PERHONEN: butterfly,\n  PRINSESSA: princesses,\n  PALOAUTO: fireEngine,\n  SATEENKAARI: rainbow,\n  PINGVIINI: penguin,\n  LINNA: castle,\n  YKSISARVINEN: unicorn\n}\n\nexport const getWordTasks = () => {\n  return Object.keys(wordsAndImages).map(key => wordTask(key))\n}\n\nexport const task = (): Task=> {\n  const result = Math.floor(Math.random() * 11); // 0...10\n  const first = Math.floor(Math.random() * (result)); // < result\n  const second = result - first;\n  return {first, second, result};\n}\n\nconst randomLessThan = (max: number) => Math.floor(Math.random()*max)\n\nconst wordTask = (word: string): WordTask => {\n  const firstRandom = randomLessThan(word.length)\n  let secondRandom\n  while (true) {\n    secondRandom = randomLessThan(word.length)\n    if (secondRandom !== firstRandom) {\n      break;\n    }\n  }\n  const blankIndices = [firstRandom, secondRandom].sort((a: number, b: number) => a-b)\n  const letters: Letter[] = [...word].map(c => ({c, status: 'Normal'}))\n  blankIndices.forEach(i => {letters[i].status = 'Hidden'})\n  const blanks = blankIndices.map(i => letters[i].c)\n  return {letters, blanks, image: wordsAndImages[word], guessLetters: randomLettersIncluding(blanks)}\n}\n\nconst letters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',\n  'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'Å', 'Ä', 'Ö']\n\nconst randomLetter = () => letters[randomLessThan(letters.length)]\n\nconst randomLetterExcluding = (toExclude: string[]) => {\n  let candidate = randomLetter()\n  while(toExclude.includes(candidate)) {\n    candidate = randomLetter()\n  }\n  return candidate\n}\n\nconst randomLettersIncluding = (toInclude: string[]) => {\n  const letterCount = 8\n  const result: string[] = []\n  for (let i = 0; i < letterCount; i++) {\n    result.push(randomLetterExcluding(result)) //no duplicates\n  }\n  \n  for (let i = 0; i < toInclude.length; i++) {\n    result[randomLessThan(letterCount)] = toInclude[i]\n  }\n  return result\n}","import React from 'react';\nimport './styles.css';\nimport { Task } from './task';\n\nexport function TaskPage({ input: { first, second, result }, setDone }: { input: Task, setDone: (t: boolean) => void }) {\n\n  const isCorrect = (value: string) => parseInt(value) === result\n\n  return (\n\n    <div className=\"flex-container row\">\n      <div className=\"flex-item\">{first}</div>\n      <div className=\"flex-item\">+</div>\n      <div className=\"flex-item\">{second}</div>\n      <div className=\"flex-item\">=</div>\n      <input className=\"flex-item color-0\" type=\"tel\" onChange={\n        (event) => {\n          if (isCorrect(event.target.value)) {\n            setDone(true);\n          }\n        }}\n      />\n    </div>\n  );\n}\n","import React, { useState } from 'react';\nimport './styles.css';\nimport { WordTask, Letter } from './task';\n\nconst removeFromArray = (c: string, source: string[]) => {\n  source.splice(source.findIndex(i => i === c), 1)\n  return source\n}\n\nconst withStatuses = (letters: Letter[], solved: string[]) => {\n  const result = [...letters]\n  solved.forEach(s => {\n    const indexToUpdate = result.findIndex(l => (l.c === s && l.status === 'Hidden'))\n    if (indexToUpdate !== -1) {\n      result[indexToUpdate].status = 'Solved'\n    }\n  })\n  return result\n}\n\nexport function WordTaskPage({ input: { letters, blanks, guessLetters }, setDone }: { input: WordTask, setDone: (t: boolean) => void }) {\n\n  const [lettersToGuess, setLettersToGuess] = useState<string[]>([...blanks])\n  const [solvedLetters, setSolvedLetters] = useState<string[]>([])\n\n  const saveCharInput = (c: string) => {\n\n    if (!lettersToGuess.includes(c)) {\n      return //incorrect letter\n    }\n\n    setSolvedLetters([...solvedLetters, c])\n    setLettersToGuess(removeFromArray(c, lettersToGuess))\n    if (lettersToGuess.length === 0) {\n      setTimeout(() => setDone(true), 1000)\n    }\n  }\n\n  return (\n    <>\n      <div className=\"flex-container row belize\">\n        {withStatuses(letters, solvedLetters).map((l: Letter, i: number) => LetterBox(l, i, saveCharInput))}\n      </div>\n      <div className=\"flex-container low row\">\n        {guessLetters.slice(0, 4).map((l: string, i: number) => GuessLetterBox(l, i, saveCharInput, solvedLetters.includes(l)))}\n      </div>\n      <div className=\"flex-container low row\">\n        {guessLetters.slice(4, 8).map((l: string, i: number) => GuessLetterBox(l, i, saveCharInput, solvedLetters.includes(l)))}\n      </div>\n    </>)\n}\n\nfunction LetterBox(c: Letter, i: number, saveInput: ((s: string) => void)) {\n  return (\n    c.status === 'Hidden' ?\n      <input key={i} className=\"flex-item-small silver\" type=\"text\" onChange={\n        (event) => {\n          saveInput(event.target.value)\n        }\n      }\n      /> :\n      c.status === 'Normal' ?\n        (<div key={i} className=\"flex-item-small river\">{c.c}</div>)\n        :\n        <div key={i} className=\"flex-item-small emerald\">{c.c}</div>\n  )\n}\n\nconst GuessLetterBox = (c: string, i: number, onClick: ((s: string) => void), correct: boolean = false) => {\n  const name = `flex-item asphalt ${correct ? 'correct-text' : 'hollow'}`;\n  return (\n    <div key={i} className={name} onClick={() => { onClick(c) }} >{c}</div>)\n}","\nimport React, { useState } from 'react';\nimport './App.css';\nimport './styles.css';\nimport { task, getWordTasks, WordTask } from './task';\nimport { TaskPage } from './TaskPage';\nimport { WordTaskPage } from './WordTaskPage';\n\nconst wordTasks: WordTask[] = getWordTasks()\n\nfunction App() {\n\n  const handleTaskDone = (done: boolean) => {\n    setDoneCount(doneCount + 1);\n    setCurrentTaskDone(done);\n  }\n\n  const [currentTaskDone, setCurrentTaskDone] = useState(false);\n  const [doneCount, setDoneCount] = useState(0);\n  const [wordGameSelected, setWordGameSelected] = useState<boolean>(true);\n\n  return (\n    <div className=\"App\">\n      <div className=\"header flex-item alizarin\">LYYTIN LASKUPELI</div>\n      {currentTaskDone ?\n        <img className=\"flex-item color-2 responsive-image\" src={wordTasks[doneCount - 1].image} onClick={() => {\n          setCurrentTaskDone(false);\n        }\n        }></img>\n        :\n        wordGameSelected ? <WordTaskPage input={wordTasks[doneCount]} setDone={handleTaskDone} />\n          : <TaskPage input={task()} setDone={handleTaskDone} />\n      }\n      <div className=\"flex-container narrow clouds\">\n        <button className=\"flex-item button small pomegranate hollow\" value=\"valmis\" onClick={() => {\n          setWordGameSelected(!wordGameSelected)\n          setCurrentTaskDone(false)\n        }} >\n          VAIHDA PELI\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}